// Do not edit!!!!!!!
// This file was generated by MeP-Integrator

#include "mep.h"

#include "mep-core1-defs.h"
#include "mep-core1-decode.h"
#include "mep-core1-model.h"

#include "common_model.h"

using namespace mep;

namespace mep_ext1 {
  class mep_ext1_cpu: public mep_cpu_vliw<mep_ext1_cpu,mepcore1_scache,dummy_scache,dummy_scache,dummy_scache,dummy_scache>
  {
  public:
    mep_ext1_cpu() :
      mep_cpu_vliw<mep_ext1_cpu,mepcore1_scache,dummy_scache,dummy_scache,dummy_scache,dummy_scache>
      (this,ISA_EXT_CORE1,ISA_MAX,ISA_MAX,ISA_MAX,ISA_MAX),
      my_core_model (this)
    {}

    void core_model_insn_before (bool first_p = true) { my_core_model.model_insn_before (first_p); }
    void core_model_step_latency (sid::host_int_4 cycles = 0) { my_core_model.step_latency (cycles); }

    UINT model_before (mepcore1_scache* sem)
      {
        UINT stall = my_core_model.model_before (this, sem);
        if (stall) update_total_latency (stall);
        return stall;
      }

    UINT model_after (mepcore1_scache* sem) { return my_core_model.model_after (this, sem); }
    UINT model_after (dummy_scache* sem) { return 1; }

    void core_model_insn_after (bool last_p = true, UINT cycles = 1) { my_core_model.model_insn_after (last_p, cycles); }

  private:
    mep_common_model<mepcore1_mep_model, mep_ext1_cpu, mepcore1_idesc, mepcore1_scache> my_core_model;
  };

#define mep_ext1_hardware hardware
}
