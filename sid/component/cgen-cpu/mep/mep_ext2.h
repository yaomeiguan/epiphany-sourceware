// Do not edit!!!!!!!
// This file was generated by MeP-Integrator

#include "mep.h"

#include "mep-core2-defs.h"
#include "mep-core2-decode.h"
#include "mep-core2-model.h"
#include "mep-cop2-16-defs.h"
#include "mep-cop2-16-decode.h"
#include "mep-cop2-16-model.h"
#include "mep-cop2-32-defs.h"
#include "mep-cop2-32-decode.h"
#include "mep-cop2-32-model.h"
#include "mep-cop2-48-defs.h"
#include "mep-cop2-48-decode.h"
#include "mep-cop2-48-model.h"
#include "mep-cop2-64-defs.h"
#include "mep-cop2-64-decode.h"
#include "mep-cop2-64-model.h"

#include "common_model.h"
#include "fmax-fpu.h"
#include "fmax-fp.h"
using sidutil::fmax_fp;

using namespace mep;

namespace mep_ext2 {
  class mep_ext2_cpu: public mep_cpu_vliw<mep_ext2_cpu,mepcore2_scache,mepcop2_16_scache,mepcop2_32_scache,mepcop2_48_scache,mepcop2_64_scache>
  {
  public:
    mep_ext2_cpu() :
      mep_cpu_vliw<mep_ext2_cpu,mepcore2_scache,mepcop2_16_scache,mepcop2_32_scache,mepcop2_48_scache,mepcop2_64_scache>
      (this,ISA_EXT_CORE2,ISA_EXT_COP2_16,ISA_EXT_COP2_32,ISA_EXT_COP2_48,ISA_EXT_COP2_64),
      my_core_model (this),
      my_cop16_model (this),
      my_cop32_model (this),
      my_cop48_model (this),
      my_cop64_model (this),
      fpu (this, new fmax_fp_ops)
    {}

    void core_model_insn_before (bool first_p = true) { my_core_model.model_insn_before (first_p); }
    void core_model_step_latency (sid::host_int_4 cycles = 0) { my_core_model.step_latency (cycles); }

    UINT model_before (mepcore2_scache* sem)
      {
        UINT stall = my_core_model.model_before (this, sem);
        if (stall) update_total_latency (stall);
        return stall;
      }

    UINT model_after (mepcore2_scache* sem) { return my_core_model.model_after (this, sem); }
    UINT model_after (mepcop2_16_scache* sem) { return my_cop16_model.model_after (this, sem); }
    UINT model_after (mepcop2_32_scache* sem) { return my_cop32_model.model_after (this, sem); }
    UINT model_after (mepcop2_48_scache* sem) { return my_cop48_model.model_after (this, sem); }
    UINT model_after (mepcop2_64_scache* sem) { return my_cop64_model.model_after (this, sem); }

    void core_model_insn_after (bool last_p = true, UINT cycles = 1) { my_core_model.model_insn_after (last_p, cycles); }

  public:
#include "fmax.h"

    fmax_fpu fpu;

  private:
    mep_common_model<mepcore2_mep_model, mep_ext2_cpu, mepcore2_idesc, mepcore2_scache> my_core_model;
    mep_common_model<mepcop2_16_mep_model, mep_ext2_cpu, mepcop2_16_idesc, mepcop2_16_scache> my_cop16_model;
    mep_common_model<mepcop2_32_mep_model, mep_ext2_cpu, mepcop2_32_idesc, mepcop2_32_scache> my_cop32_model;
    mep_common_model<mepcop2_48_mep_model, mep_ext2_cpu, mepcop2_48_idesc, mepcop2_48_scache> my_cop48_model;
    mep_common_model<mepcop2_64_mep_model, mep_ext2_cpu, mepcop2_64_idesc, mepcop2_64_scache> my_cop64_model;
  };

#define mep_ext2_hardware hardware
#define CGEN_CPU_FPU(cpu) (&cpu->fpu)
}
