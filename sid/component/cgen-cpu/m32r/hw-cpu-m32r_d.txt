* Name
  hw-cpu-m32r/d

* Synopsis
  This component models the M32R/D processor.

  Buses: debugger-bus 
  Pins: start-pc-set! reset! trap trap-code step! yield flush-icache
  Accessors: data-memory insn-memory
  Attributes: debug-exec? trace-extract? trace-result? engine-type
        step-insn-count insn-count rN pc gdb-register-N gdb-num-registers state-snapshot
	trap trap-code

  Library: libcgencpu.la
  Symbol name: cgen_component_library

* Functionality

  - Modelling

    * This component models a simplified M32R/D processor.  
    * It does not model supervisory functions such as
      exceptions/traps.  It implements only a subset of user-level
      M32R/D instructions.

  - Behaviors

    * Initialization

      The cpu performs a power-on-reset of style operation when the
      "reset!" pin is driven.  Other mode settings may be controlled
      by pins and/or attributes, for instance, "start-pc-set!" to set 
      the PC.  These are useful if the standard powerup state of the 
      CPU needs to be changed for running a program that expects an 
      initialized environment.

    * Execution

      The component executes zero or more instructions when the
      "step!" pin is driven.  You can specify the maximum number 
      of instructions to be executed via the "step-insn-count"
      attribute.  If the "yield" pin is driven in a reentrant fashion 
      while the instruction loop is active, the loop will be exited at 
      the next opportunity.  The "insn-count" attribute accumulates
      the total number of instructions executed since reset.

      Each instruction is first fetched from memory via the
      "insn-memory" accessor, and its decoding traced if the
      "trace-extract?" attribute is set to a true value.  The decoded
      form may be cached indefinitely afterwards, although this cache is
      flushed when the "flush-icache" pin is driven.

      During the execution of an instruction, this component may make
      accesses using the "data-memory" accessor, may update its
      simulated registers, and may trigger an exception/trap.  

      If the "enable-step-trap?" attribute is set, after each
      instruction, a single-stepping trap is signalled as described in
      the "Exceptions/traps" behavior below.

    * Exceptions/traps

      When encountering exception/trap conditions such as memory
      access errors or software interrupts, this component signals the
      event using the "trap" pin.  (For some traps, the "trap-code"
      pin is driven with extra information just beforehand.)  An
      external component may interpret the values in the table below,
      and declare a disposition for the condition.  In the absence of
      input, the condition will be treated as the hardware would, that
      is by dispatching to exception vectors, switching processor
      modes, etc.

      The trap codes sent on the "trap" output pin are:
      "trap"    cause                   "trap-code"
      1         software trap           instruction bitmap
      2         breakpoint              bkpt number
      3         system call             syscall number
      4         invalid instruction     n/a
      5         memory fault            faulting address
      6         arithmetic overflow     faulting address
      7         stepped                 n/a

      The disposition codes returned on the "trap" input pin are:
      "trap"    effect
      0 or n/a  dispatch as hardware would
      1         handled; continue
      2         reissue
      3         handled; skip instruction and continue

    * Register access

      Most general purpose registers are accessible as attributes "r0"
      through "r14".  The "pc" attribute is also available.

      This component exports a number of attributes for use by the
      sw-debug-gdb component.  These are the "gdb-*" attributes, in
      the "debugger" category.  The "gdb-register-N" group access all
      registers in gdb's indexing scheme, in raw target byte order.
      The "gdb-register-pc" is a special watchable with no associated
      attribute.  The "gdb-num-registers" attribute provides the limit
      for N.

      The "debugger-bus" bus provides access to the target program's
      address space, and is used by gdb to access target memory.

  - SID conventions

    * This is a functional component.
    * It supports save/restore of the CPU state.
    * Triggerpoints are supported for CPU registers.
    * It prevents harmful recursion from the "step!" input pin.

* Environment

  Related components:

  * CPUs connect to many components: memory to store data and
    instructions, a scheduler to provide "step!" signals, software
    trap emulators, debugger interfaces.

  Host system:

  * Some error conditions are signalled by messages to standard error.
    These include some illegal CPU states caused by the simulated
    program.

* SID interface reference

  Low level:

  * pins

  start-pc-set! | input | any value | initialization
  reset! | input | 0 or 1 | initialization
  trap | input/output | enum values | exceptions/traps
  trap-code | output | various values | exceptions/traps
  step! | input | any value | execution
  yield | input | any | execution
  flush-icache | input | any | execution

  * accessors

  data-memory | any | execution
  insn-memory | typically 4-byte accesses | execution

  * buses

  debugger-bus | any | any | debugger access

  * attributes

  debug-exec? | setting | boolean | false | initialization
  trace-extract? | setting | boolean | false | initialization
  trace-result? | setting | boolean | false | initialization
  step-insn-count | setting | number | 1 | execution
  insn-count | watchable register | number | n/a | execution
  enable-step-trap? | setting | boolean | false | execution
  rN | watchable register | number | n/a | register access
  pc | watchable register | number | n/a | register access
  gdb-register-N | debugger | byte array | n/a | register access
  gdb-num-registers | debugger | number | n/a | register access
  state-snapshot | | opaque string | n/a | state save/restore
  trap | watchable pin | number | n/a | execution/traps
  trap-code | watchable pin | number | n/a | execution/traps
