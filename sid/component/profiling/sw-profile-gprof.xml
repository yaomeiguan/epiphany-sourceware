<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libprof.la" dlsym="prof_component_library">
  <defcomponent name="sw-profile-gprof" type="concrete">

    <!-- pins -->
    <defpin name="reset" direction="in" legalvalues="any" behaviors="resetting" />
    <defpin name="pc" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="pc-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="sample" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-caller" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-caller-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-callee" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="cg-callee-hi" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="store" direction="in" legalvalues="any" behaviors="profile generation" />

    <!-- attributes -->
    <defattribute name="value-count" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-min" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-max" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="limit-min" category="setting" legalvalues="decimal string" defaultvalue="0" behaviors="data gathering" />
    <defattribute name="limit-max" category="setting" legalvalues="decimal string" defaultvalue="infinity" behaviors="data gathering" />
    <defattribute name="bucket-size" category="setting" legalvalues="integer" defaultvalue="1" behaviors="data gathering" />
    <defattribute name="pc-size" category="setting" legalvalues="4 or 8" defaultvalue="4" behaviors="data gathering" />
    <defattribute name="output-file" category="setting" legalvalues="file name" defaultvalue="'gmon.out'" behaviors="configuration" />
    <defattribute name="output-file-endianness" category="setting" legalvalues="0/1/2/little/big/unknown" defaultvalue="unknown" behaviors="configuration" />
    <defattribute name="reset" category="pin" behaviors="resetting" />
    <defattribute name="sample" category="pin" behaviors="data gathering" />
    <defattribute name="cg-caller" category="pin" behaviors="data gathering" />
    <defattribute name="cg-caller-hi" category="pin" behaviors="data gathering" />
    <defattribute name="cg-callee" category="pin" behaviors="data gathering" />
    <defattribute name="cg-callee-hi" category="pin" behaviors="data gathering" />
    <defattribute name="store" category="pin" behaviors="profile generation" />


    <!-- relationships -->
    <defrelationship name="target-component" behaviors="configuration" />
  </defcomponent>
  <synop>
    <p>
      This component accumulates profiling information from a target
      CPU and generates a gprof-compatible histogram file. 
    </p>
  </synop>
  <func>

    <modelling>
      <p>
	This component emulates profiling routines embedded in target
	programs, as if they were compiled with <tt>gcc -pg</tt>.
      </p>
    </modelling>

    <behavior name="configuration">
      <p>
      This component needs to be configured with the <relation>target-component</relation>
      relation.  The first element in the relation will be used as the
      target of profiling.  If pc-size is 64, then
      the target component should also have an attribute with the same name suffixed by "-hi"
      </p>
      <p>
      The <attribute>bucket-size</attribute> attribute configures the width of the
      histogram buckets.  It is invalid to change the bucket size if
      any samples have been accumulated (if <attribute>value-count</attribute> is nonzero).
      </p>
      <p>
      The <attribute>pc-size</attribute> attribute configures the width of the
      program counter in bytes.  Valid values are 4 and 8.
      </p>
      <p>
      The <attribute>output-file</attribute> setting gives the name of the eventual profiling
      output file.  The <attribute>output-file-endianness</attribute> setting determines the
      endianness of the gprof formatted output.
      </p>
    </behavior>

    <behavior name="data gathering">
      <p>
      Whenever the <pin>sample</pin> pin is driven, this component
      takes a single sample using the number drive  on the pin.
      The resulting number is accumulated in a big histogram, in
      the appropriate bucket.  The bucket is chosen by combining the two 32 bit values
      last driven on the <pin>pc</pin> and the <pin>pc-hi</pin> pins to form one 64 bit index.
      This index is then masked into <attribute>bucket-size</attribute>-wide buckets.
      If the target component is unset then no sample is accumulated.
      </p>
      <p>Alternately, if the <pin>cg-caller</pin> and perhaps the <pin>cg-caller-hi</pin>
      and then the <pin>cg-callee</pin> and perhaps the <pin>cg-callee-hi</pin>
      pins are driven, the values driven are interpreted as the caller and the
      callee PC addresses of a subroutine call event.  These events are recorded
      in a dynamic call graph. The -hi versions of the <pin>cg-caller-pin</pin> and
      <pin>cg-callee-pin</pin> are used to provide 64 bit pc values and, if used,
      must be driven before their counterparts.
      </p>
      <p>
      If a sample was collected, and falls between the
      <attribute>limit-min</attribute> and
      <attribute>limit-max</attribute> attributes' bounds,
      <attribute>value-count</attribute> is incremented, and
      <attribute>value-min</attribute> and
      <attribute>value-max</attribute> registers are updated.
      </p>
    </behavior>

    <behavior name="resetting">
      <p>
      Whenever the <pin>reset</pin> pin is driven, the entire accumulated
      histogram and associated counters are discarded and a new count
      will be started.  It is not necessary to drive this pin at
      simulation startup.
      </p>
    </behavior>

    <behavior name="profile generation">
      Whenever the <pin>store</pin> pin is driven, this component dumps the entire
      accumulated histogram and call graph into a gprof (version 1) formatted file.  The
      file's endianness is chosen based on the <attribute>target-file-endianness</attribute>
      setting.  If it is unset, the target component's <attribute>endian</attribute> attribute
      will be queried and used if valid.

      The histogram and call graph are not automatically cleared after the store
      operation.  This makes it possible to save multiple generational
      profiling files to track history of a program cumulatively.  If
      the <pin>reset</pin> pin is triggered after every <pin>store</pin>, then separate
      intervals of the program's execution may be profiled.
    </behavior>

    <convention name="supervisory" supported="true" />
    <convention name="save/restore" supported="false" />
    <convention name="triggerpoints" supported="false" />
    <convention name="detect-reentrancy" supported="false" />
    <convention name="category" supported="true">
      It presents attributes in the <tt>pin</tt>, <tt>setting</tt> and categories.
    </convention>
  </func>
  <env>
    <title>
   Related components</title>
    <p>
     This component is typically connected to a CPU, and told to
      monitor the CPU's program counter (pc) register.  Sampling may
      be driven by any activity in SID, such as bus traffic (see
      <tt>hw-probe-bus</tt>), or host or target schedulers (see
      <tt>sid-sched-*</tt>).
      </p>

    <code>
	new sw-profile-gprof gprof
	new SOME_KIND_OF_CPU cpu
	relate gprof target-component cpu
	connect-pin shutdown-manager output-5 -&gt; gprof store
	connect-pin cpu sample-gprof -&gt; gprof sample
	connect-pin cpu gprof-pc -&gt; gprof pc
    </code>
    <title>
   Host system
    </title>
    <p>
    The amount of data tracked by this component may be very large,
      if <attribute>bucket-size</attribute> is small and the target value has a large number
      of distinct values.  Internally, a map or hash_map is used to
      track each bucket, so it does not matter how sparse the target
      value domain is.  However, at store time, each potential
      bucket in the histogram, from <attribute>value-min</attribute> to <attribute>value-max</attribute>, is
      recorded, so sparse values may generate large blocks of zeroes in
      the output.
    </p>
    <p>
      Depending on whether the connected CPU model sends call-graph events,
      the resulting <tt>gmon.out</tt> may contain histogram with or without
      call-graph data.  If the former, gprof must be run with an option such
      as <tt>--flat-profile</tt>.
    </p>
  </env>
</defcomplib>

