<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libprof.la" dlsym="prof_component_library">
  <defcomponent name="sw-profile-gprof" type="concrete">

    <!-- pins -->
    <defpin name="sample" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="reset" direction="in" legalvalues="any" behaviors="data gathering" />
    <defpin name="store" direction="in" legalvalues="any" behaviors="profile generation" />


    <!-- attributes -->
    <defattribute name="value-count" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-min" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="value-max" category="register" legalvalues="decimal string" behaviors="data gathering" />
    <defattribute name="limit-min" category="setting" legalvalues="decimal string" defaultvalue="0" behaviors="data gathering" />
    <defattribute name="limit-max" category="setting" legalvalues="decimal string" defaultvalue="infinity" behaviors="data gathering" />
    <defattribute name="value-attribute" category="setting" legalvalues="name" defaultvalue="'pc'" behaviors="data gathering" />
    <defattribute name="output-file" category="setting" legalvalues="file name" defaultvalue="'gmon.out'" behaviors="configuration" />
    <defattribute name="output-file-endianness" category="setting" legalvalues="0/1/2/little/big/unknown" defaultvalue="unknown" behaviors="configuration" />
    <defattribute name="sample" category="pin" behaviors="data gathering" />
    <defattribute name="reset" category="pin" behaviors="data gathering" />
    <defattribute name="store" category="pin" behaviors="profile generation" />


    <!-- relationships -->
    <defrelationship name="target-component" behaviors="configuration" />
  </defcomponent>
  <synop>
    <p>
      This component accumulates profiling information from a target
      CPU and generates a gprof-compatible histogram file. 
    </p>
  </synop>
  <func>

    <modelling>
      <p>
	This component emulates profiling routines embedded in target
	programs, as if they were compiled with <tt>gcc -pg</tt>.
      </p>
    </modelling>

    <behavior name="configuration">
      <p>
      This component needs to be configured with the <relation>target-component</relation>
      relation.  The first element in the relation will be used as the
      target of profiling.  The <attribute>value-attribute</attribute> setting contains the
      name of the target component's attribute that will be collected.
      </p>
      <p>
      The <attribute>bucket-size</attribute> attribute configures the width of the
      histogram buckets.  It is invalid to change the bucket size if
      any samples have been accumulated (if <attribute>value-count</attribute> is nonzero).
      </p>
      <p>
      The <attribute>output-file</attribute> setting gives the name of the eventual profiling
      output file.  The <attribute>output-file-endianness</attribute> setting determines the
      endianness of the gprof formatted output.
      </p>
    </behavior>

    <behavior name="data gathering">
      <p>
      Whenever the <pin>sample</pin> pin is driven, this component takes a single
      sample of the configured target component's value attribute.  The
      attribute is interpreted as a numeric string, and the resulting
      number is accumulated in a big histogram, in the appropriate bucket.
      The bucket is chosen by masking the number into <attribute>bucket-size</attribute>-wide
      buckets.
      </p>
      <p>
      If the target component is unset, or its target attribute does not
      result in a valid numeric string, no sample is accumulated.  If a
      sample was collected, and falls between the <attribute>limit-min</attribute> and <attribute>limit-max</attribute>
      attributes' bounds, <attribute>value-count</attribute> is incremented, and <attribute>value-min</attribute>
      and <attribute>value-max</attribute> registers are updated.
      </p>
      <p>
      Whenever the <pin>reset</pin> pin is driven, the entire accumulated
      histogram and associated counters are discarded and a new count
      will be started.  It is not necessary to drive this pin at
      simulation startup.
      </p>
    </behavior>

    <behavior name="profile generation">
      Whenever the <pin>store</pin> pin is driven, this component dumps the entire
      accumulated histogram into a gprof (version 1) formatted file.  The
      file's endianness is chosen based on the <attribute>target-file-endianness</attribute>
      setting.  If it is unset, the target component's <attribute>endian</attribute> attribute
      will be queried and used if valid.

      The histogram is not automatically cleared after the store
      operation.  This makes it possible to save multiple generational
      profiling files to track history of a program cumulatively.  If
      the <pin>reset</pin> pin is triggered after every <pin>store</pin>, then separate
      intervals of the program's execution may be profiled.
    </behavior>


    <convention name="supervisory" supported="true" />
    <convention name="save/restore" supported="false" />
    <convention name="triggerpoints" supported="false" />
    <convention name="detect-reentrancy" supported="false" />
    <convention name="category" supported="true">
      It presents attributes in the <tt>pin</tt>, <tt>setting</tt> and categories.
    </convention>
  </func>
  <env>
    <title>
   Related components</title>
    <p>
     This component is typically connected to a CPU, and told to
      monitor the CPU's program counter (pc) register.  Sampling may
      be driven by any activity in SID, such as bus traffic (see
      <tt>hw-probe-bus</tt>), or host or target schedulers (see
      <tt>sid-sched-*</tt>).
      Perhaps the simplest way is to take a CPU PC sample every time
      the CPU has completed a batch of instructions.</p>

    <code>
	new sw-profile-gprof gprof
	new SOME_KIND_OF_CPU cpu
	relate gprof target-component cpu
	connect-pin shutdown-manager output-5 -&gt; gprof store
	connect-pin foo output -&gt; cpu step!
	connect-pin foo output -&gt; gprof sample
	# Set sampling interval by number of CPU instructions.
	set cpu step-insn-count 127
    </code>
    <title>
   Host system
    </title>
    <p>
    The amount of data tracked by this component may be very large,
      if <attribute>bucket-size</attribute> is small and the target value has a large number
      of distinct values.  Internally, a map or hash_map is used to
      track each bucket, so it does not matter how sparse the target
      value domain is.  However, at store time, each potential
      bucket in the histogram, from <attribute>value-min</attribute> to <attribute>value-max</attribute>, is
      recorded, so sparse values may generate large blocks of zeroes in
      the output.
    </p>
    <p>
     Since this component generates a histogram-type gprof file
      instead of the arc-type file that <tt>-pg</tt>-compiled target programs
      usually generate, gprof must be run with an option such as
      <tt>--flat-profile</tt>.  Call graph information is not collected.
    </p>
  </env>
</defcomplib>

