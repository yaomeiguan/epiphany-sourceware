# writethru.exp -*- Tcl -*-
# Test the write through strategy.
#
# Copyright (C) 2001 Red Hat, Inc.

source $srcdir/$subdir/utils.exp

set test "sid startup"
sid_config_component_test_with_tracing "cache.conf" \
        "load libcache.la cache_component_library" \
        "hw-cache-basic"

if {[sid_start "cache.conf"]} { pass $test } else { fail $test; return }

set test "acquire upstream bus handle"
set cache_bus [sid_cmd "sid::component::find_bus $victim upstream"]
if {$cache_bus != ""} { pass $test } else { fail $test }

set test "generate test bus for downstream"
set mem_bus [sid_cmd "sid::bus::new"]
if {$mem_bus == ""} { fail $test } else { pass $test }

set test "connect test bus to cache"
set result [sid_cmd "sid::component::connect_accessor $victim downstream $mem_bus"]
if {$result == "ok"} { pass $test } else { fail $test }

instrument_bus $mem_bus

# Enable write through.

set test "enable write through"
set result [sid_cmd "sid::component::set_attribute_value $victim write-through? yes"]
if {$result != "ok" } { fail $test; return }

# Test write through by writing to a line which produces a hit.
# Check to make sure that the memory bus is accessed.

set test "read byte from 0x100"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x100"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_miss

set test "read byte from 0x100"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x100"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_hit

set test "write byte to 0x100"
clear_miss_flag
set result [sid_cmd "sid::bus::write_h4_l1 $cache_bus 0x100 0x55"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_miss

set test "read byte back from 0x100"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x100"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_hit

# Now disable write through.

set test "disable write through"
set result [sid_cmd "sid::component::set_attribute_value $victim write-through? no"]
if {$result != "ok" } { fail $test; return }

# Test write through by writing to a line which produces a hit.
# Check to make sure that no memory bus accesses are made.

set test "read byte from 0x500"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x500"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_miss

set test "read byte from 0x500"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x500"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_hit

set test "write byte to 0x500"
clear_miss_flag
set result [sid_cmd "sid::bus::write_h4_l1 $cache_bus 0x500 0x55"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_hit

set test "read byte back from 0x500"
clear_miss_flag
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x500"]
if ![sid_bus_ok_p $result] then { fail $test; return }
assert_hit

set test "sid stop"
if {[sid_stop]} { pass $test } else { fail $test; return }

# zap temp file if tests were successful
global exit_status
if {$exit_status == "0"} { file delete "cache.conf" }
