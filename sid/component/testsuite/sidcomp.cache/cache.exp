# cache.exp -*- Tcl -*-
# Basic testing for the cache component. 
#
# Copyright (C) 2001 Red Hat, Inc.

source $srcdir/$subdir/utils.exp

set test "sid configuration"
sid_config_component_test_with_tracing "cache.conf" \
        "load libcache.la cache_component_library" \
        "hw-cache-basic"
pass $test

set test "sid startup"
if {[sid_start "cache.conf"]} { pass $test } else { fail $test; return }

set test "all pins are present"
sid_assert_includes_all "sid::component::pin_names $victim" \
	{report! flush invalidate invalidate-all prefetch lock unlock}

set test "all attributes are present"
sid_assert_includes_all "sid::component::attribute_names $victim" \
	{associativity cache-size line-size write-through? \
	 write-allocate? hash-bit-mask hash-shift-amount \
	 flushes replacements read-hit-rate write-hit-rate \
	 read-accesses write-accesses misaligned-reads \
	 misaligned-writes collect-statistics? report-heading \
	 hit-latency miss-latency dump!}

set test "upstream bus is present"
sid_assert_includes_all "sid::component::bus_names $victim" upstream

set test "downstream accessor is present"
sid_assert_includes_all "sid::component::accessor_names $victim" downstream

catch {unset attr}
foreach attr {read-accesses write-accesses misaligned-reads \
	misaligned-writes flushes replacements} {
    set test "$attr initialised to 0"
    set value [get_attr $attr]
    if {$value == 0} { pass $test } else { fail $test }
}

foreach attr {read-hit-rate write-hit-rate} {
    set test "$attr is initialised to 0%"
    set value [get_attr $attr]
    if {$value == "0%"} { pass $test } else { fail $test }
}

proc assert_attr_default {attr default} {
    global victim
    set test "$attr is set for hw-cache-basic"
    set value [get_attr $attr]
    if {$value == $default} { pass $test } else { fail $test }
}

assert_attr_default associativity direct-mapped
assert_attr_default cache-size 16384
assert_attr_default line-size 32
assert_attr_default write-through? no
assert_attr_default write-allocate? no
assert_attr_default collect-statistics? yes 
assert_attr_default report-heading "cache profile report"

# now the real meaty tests

set test "acquire upstream bus handle"
set cache_bus [sid_cmd "sid::component::find_bus $victim upstream"]
if {$cache_bus != ""} { pass $test } else { fail $test }

set test "generate test bus for downstream"
set mem_bus [sid_cmd "sid::bus::new"]
if {$mem_bus == ""} { fail $test } else { pass $test }

set test "connect test bus to cache"
set result [sid_cmd "sid::component::connect_accessor $victim downstream $mem_bus"]
if {$result == "ok"} { pass $test } else { fail $test }

instrument_bus $mem_bus

# read a byte from 0x100
# this should cause a cache miss

set test "read a byte from 0x100"
clear_miss_flag
set prior(reads) [get_attr read-accesses]
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x100"]
assert_miss
assert_variant read-accesses $prior(reads)

set test "read a byte from 0x100"
clear_miss_flag
set prior(reads) [get_attr read-accesses]
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x100"]
assert_hit
assert_variant read-accesses $prior(reads)

set test "read another byte on the same line as 0x100"
clear_miss_flag
set prior(reads) [get_attr read-accesses]
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x101"]
assert_hit
assert_variant read-accesses $prior(reads)

# read another address that hashes to the same line index
set test "read from 0x4100 which hashes to the same line"
clear_miss_flag
set prior(reads) [get_attr read-accesses]
set prior(replacements) [get_attr replacements]
set prior(flushes) [get_attr flushes]
set result [sid_cmd "sid::bus::read_h4_l1 $cache_bus 0x4100"]
assert_miss
assert_variant read-accesses $prior(reads)
assert_variant replacements $prior(replacements)
assert_invariant flushes $prior(flushes)

set test "sid stop"
if {[sid_stop]} { pass $test } else { fail $test; return }

# zap temp file if tests were successful
global exit_status
if {$exit_status == "0"} { file delete "cache.conf" }
