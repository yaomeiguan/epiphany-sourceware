# docs.exp -*- Tcl -*-
#
# Copyright (C) 1999, 2001 Red Hat
#
# Procedures for performing an integrity check on an XML documentation
# file according to the component DTD.
#
# doc_test runs a integrity test on documentation.

proc doc_test {subdirectory compname} {
    global docname contents subdir

    set subdir $subdirectory
    regsub -all -- / $compname _ docname

    # Each sub-test, one by one.
    doc_exists $compname txt
    doc_exists $compname xml
    doc_includes_component $compname

    if {[info exists contents]} { unset contents }
}


proc doc_load {} {
    global docname contents
    
    if {[info exists contents]} { return 1 }

    if {![catch {set fd [open $docname r]}]} {
	set contents [read $fd]
	close $fd
	return 1
    }
    return 0
}
	

# Test if a doc file exists in the source tree.
# Passes or fails the test.

proc doc_exists {compname extension} {
    global srcdir subdir docname

    # search for related file names first
    set parts [split $docname {}]
    for {set i [expr [llength $parts] - 1]} {$i > 0} {set i [expr $i - 1]} {
	set candidate [join [lrange $parts 0 $i] {}]
	set dir [file join [file join $srcdir ".."] $subdir]
	set pattern "[file join $dir $candidate]*.${extension}"
	set candidates [glob -nocomplain -- $pattern]
	verbose "Candidates: $pattern -> $candidates"
	if {[llength $candidates] == 1} then {
	    pass "Documentation file (${extension}) for ${compname} exists"
	    set docname [lindex $candidates 0]
	    return
	}
    }
    fail "Documentation file (${extension}) for ${compname} is missing"
}


# Test if the documentation file includes documentation about COMPONENT.
# Passes or fails the test.

proc doc_includes_component {component} {
    global docname contents

    if {![doc_load]} { return }
    
    if {[regexp "<defcomponent name=\"${component}\"" $contents]} {
	pass "Documentation file seems to document $component"
    } else {
	fail "Documentation file does not seem to document $component"
    }
}
