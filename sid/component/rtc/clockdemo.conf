set main verbose? 0
load libsched.la sched_component_library
load librtc.la rtc_component_library
load libglue.la glue_component_library
load libtclapi.la tcl_bridge_library
# first section
new sid-sched-host-accurate host-sched
new sid-sched-sim target-sched
# tk system monitor
new sid-control-tksm tksm
# second section
set host-sched num-clients 10 # large enough?
set host-sched 0-regular? 1
set host-sched 0-time 50
set target-sched num-clients 10 # large enough?
set target-sched 0-regular? 1
set target-sched 0-time 1000
# pin connections
connect-pin main perform-activity -> host-sched advance
connect-pin main perform-activity -> target-sched advance
# tk system monitor
relate main component-catalog-informees tksm
# bridge-tk adaptive event polling
connect-pin host-sched 8-event -> tksm !event
connect-pin host-sched 8-control <- tksm !event-control
# (bootstrap)
set host-sched 8-regular? 0
set host-sched 8-time 1
# refresh
set host-sched 1-regular? 1
set host-sched 1-time 1000
connect-pin host-sched 1-event -> tksm refresh
#
# rtc instances under test
#
# rtc-target: a clock that runs on target time
#
new hw-rtc-ds1642 rtc-target
set target-sched 2-regular? 1
set target-sched 2-time 1000
connect-pin target-sched 2-event -> rtc-target clock
#
# rtc-host: a clock that runs on host time
#
new hw-rtc-ds1742 rtc-host
set host-sched 2-regular? 1
set host-sched 2-time 1000
connect-pin host-sched 2-event -> rtc-host clock
#
# rtc-host-fast: a clock that runs three times as fast as host time
#
new hw-rtc-ds1742 rtc-host-fast
set host-sched 3-regular? 1
set host-sched 3-time 333
connect-pin host-sched 3-event -> rtc-host-fast clock
