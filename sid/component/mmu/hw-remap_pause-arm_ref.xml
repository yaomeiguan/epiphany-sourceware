<?xml version="1.0" ?>
<!DOCTYPE defcomplib SYSTEM "http://sources.redhat.com/sid/component.dtd">

<defcomplib lib="libmmu.la" dlsym="mmu_component_library">
  <defcomponent name="hw-remap/pause-arm/ref" type="concrete">


    <!-- pins -->
    <defpin name="reset" direction="in" legalvalues="0 or non-zero" behaviors="resetting" />
    <defpin name="halt!" direction="out" legalvalues="0 or non-zero" behaviors="halting" />


    <!-- buses -->
    <defbus name="access-port" addresses="all addresses" accesses="any" behaviors="remapping" />
    <defbus name="registers" addresses="0x0 to 0x37" accesses="read/write words" behaviors="register access" />


    <!-- accessors -->
    <defaccessor name="all" accesses="any bus operation" behaviors="remapping" />


    <!-- attributes -->
    <defattribute name="remapping?" category="setting" legalvalues="boolean string" defaultvalue="true" behaviors="remapping, remapping setup" />
    <defattribute name="num-relocations" legalvalues="numeric string" defaultvalue="0" behaviors="remapping setup" />
    <defattribute name="N-start" category="setting" legalvalues="numeric string" behaviors="remapping setup" />
    <defattribute name="N-end" category="setting" legalvalues="numeric string" behaviors="remapping setup" />
    <defattribute name="N-reloc-to" category="setting" legalvalues="numeric string" behaviors="remapping setup" />
  </defcomponent>

  <synop>
    <p> The remap and pause controller, present on the ARM PID7T
    board, handles four rather independent functions:
    </p>
    <ul>
      <li>Identification</li>
      <li>Remapping of memory (such that, for instance, a power-on
	reset of the board will cause a ROM to be mapped to address 0)</li>
      <li>Pausing the CPU until an interrupt occurs.</li>
      <li>Checking for reset status ("was the board just reset?")</li>
    </ul>
  </synop>
  <func>
    <modelling>
      <p>The controller has a variety of functions, most of which are
      trivial to simulate.  A minimal implementation is provided for
      controller identification.  The most complex aspect of this
      component is how remapping is handled.  During boot-up, the
      controller uses a "reset map" that maps a range of addresses to
      some other location (typically address 0).  At some point, the
      target program will write to one of the controller's registers,
      causing it to switch to a "normal map", in which case no address
      translation occurs. </p>

      <p>In order for the mapping to occur, this controller must be
      placed between the CPU and other components, such as peripherals
      and the main memory.  This additional level of indirection for
      bus traffic (particularly between a CPU and memory) may
      introduce performance penalties.  This controller should be used
      only when necessary.  Even then, it is possible to route bus
      traffic around this component if the remapping facility is not
      required.</p>

    </modelling>


    <behavior name="register access">
      <p> The <bus>registers</bus> bus provides read/write access to
      the internal registers of the remap/pause controller.  The
      memory map of the register set is shown below.  More detail
      about each of these registers can be found in the ARM
      documentation (see ``References'').</p>
	<table>	  
	  <tr>                <th>address</th>         <th>read</th>            <th>write</th></tr>
	  <tr>               <td>0</td>               <td>(reserved)</td>     <td> pause</td></tr>
	  <tr>               <td>+ 0x10</td>          <td>identification</td>  <td>(reserved)</td></tr>
	  <tr>                <td>+ 0x20</td>          <td>(reserved)</td>      <td>clear reset map</td></tr>
	  <tr>                <td>+ 0x30</td>          <td>reset status</td>    <td>reset status set</td></tr>
	  <tr>                <td>+ 0x34</td>          <td>(reserved)</td>      <td>reset status clear</td></tr>
	</table>
    </behavior>

    <behavior name="resetting">
      <p>
        If the <pin>reset</pin> pin is driven with a non-zero value,
        the reset status is updated within the component such that
        interrogating the controller's reset status will indicate that
        a power on reset has occurred.
      </p>
    </behavior>

    <behavior name="halting">
      <p>
        The <pin>halt!</pin> pin may be connected to a component such
        as an ARM CPU which knows to halt instruction processing when
        the pin is driven with a non-zero value.  This pin will be
        driven when the pause register is written to.
      </p>
    </behavior>

    <behavior name="remapping">
      <p>
        This <bus>access-port</bus> bus provides upstream access the
        remapper function in this component.  Reads/writes to this bus
        are translated (if appropriate) and passed onto the second
        bus, as set by the <accessor>all</accessor> accessor.
      </p>
    </behavior>

    <behavior name="remapping setup">
      <p>
        The <attribute>remapping?</attribute> attribute specifies
        which memory map will be used.  It is anticipated that this
        attribute will be used at the start of a simulation session to
        provide the equivalent of a jumper for enabling the reset or
        the normal memory map at power-up.  If the attribute is set to
        `yes', then any relocations that have been defined will
        apply. As usual, writing to the `clear reset map' register
        will cause the normal map to be used.
      </p>
      <p>
        Please note that the polarity of the
        <attribute>remapping?</attribute> flag is opposite to some ARM
        documentation.  ARM refers to a "Normal (Remapped)" condition
        on the PID7T board when the customary sid mapping is disabled,
        and "Reset" mapping condition when the customary sid mapping
        is enabled.  This is just a terminology and sid configuration
        policy issue.
      </p>
      <p>
        The <attribute>num-relocations</attribute> attribute specifies
        how many relocations are to be defined via the numeric N-
        attributes (see below).  This serves little purpose other than
        to dynamically generate the N- attributes necessary for
        defining the relocations.  Note: this attribute may only be
        set once.
      </p>
      <p>
        The <attribute>N-start</attribute> family of attributes
        specify the starting addresses of a memory regions that are to
        be relocated to a different location.  If there are three
        available relocations (due to setting
        <attribute>num-relocations</attribute> to 3), then there will
        be three sets of attributes, prefixed by 0-, 1-, and 2-.  The
        first starting address attribute is 0-start.
      </p>
      <p>
        The <attribute>N-end</attribute> family of attributes specify
        the end of the memory regions that are to be relocated to a
        different location.  Usually, this is: <tt>(base + limit) -
        1</tt> That is, the address given to the N-start and N-end
        attributes are all inclusive.
      </p>
      <p>
        The <attribute>N-reloc-to</attribute> family of attributes
        specify the addresses to which region N will be relocated.
      </p>
    </behavior>

    <convention name="functional" supported="true" />
    <convention name="save/restore" supported="true" />
    <convention name="triggerpoints" supported="true">
      <p>It provides a single attribute-based triggerpoint,
      <attribute>remapping?</attribute>.</p>
    </convention>
  </func>
  <env>
    <title>Related components</title>
    <ul>
      <li>
	<p>This component usually sits between a CPU and the remaining
	components of a complete system (in order to handle the
	remapping discussed above).  Thus, the CPU's data and
	instruction memory accesses are routed through this component.
	This component would then be connected to the traditional
	mapper component which will redirect bus traffic based on the
	target address.</p></li>
      
      <li><p>A configuration file fragment illustrating this idea appears
	  below:</p>
	<code>
        new hw-remap/pause-arm/ref remapper
        new hw-mapper-basic bus
        new hw-cpu-arm7t cpu
        connect-bus cpu insn-memory remapper access-port
        connect-bus cpu data-memory remapper access-port
        connect-bus remapper all bus access-port
	</code></li>
      </ul>    
  </env>

  <refs>
  More details about this controller can be found <a type="url"
  href="http://www.arm.com/Documentation/UserMans/rps/#rp">on the
  web</a>.
  </refs>

</defcomplib>

