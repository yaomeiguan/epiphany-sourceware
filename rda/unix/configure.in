dnl Process this file with autoconf to produce a configure script.
AC_INIT(server.h)
AC_CANONICAL_SYSTEM
# case "$target" in
#    sh-*) CC=sh-linux-gnu-gcc;;
# esac
AM_INIT_AUTOMAKE(rda,0.1)
AM_CONFIG_HEADER(config.h:config.in)

dnl automake support
AM_MAINTAINER_MODE
AM_PROG_LIBTOOL
AC_EXEEXT
AC_LANG_C

arm32=yes
AC_ARG_ENABLE(arm32,
[  --enable-arm32=yes to force arm to 32 bit compilation],
[case "${enableval}" in
  yes) arm32=yes ;;
  no)  arm32=no ;;
  *)
esac])

dnl headers
AC_CHECK_HEADERS(errno.h ptrace.h signal.h string.h strings.h sys/procfs.h \
	asm/reg.h sys/ptrace.h sys/reg.h sys/wait.h )

# Provide descriptions for the various preprocessor symbols.
# (Autoheader is happy even if only one of the AC_DEFINEs has a
# description, so we could put these with the first AC_DEFINE.  But
# it's better to have the descriptions for symbols that are used
# across multiple architectures in an architecture-independent spot;
# we don't want them going away if architectures get dropped.)
AH_TEMPLATE(FPREGSET_T, [Define the type name of an fpregset])
AH_TEMPLATE(HAVE_LWPID_T, [Define if system headers will define lwpid_t])
AH_TEMPLATE(HAVE_PRFPREGSET_T,
            [Define if system headers will define prfpregset_t])
AH_TEMPLATE(HAVE_PRGREGSET_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(HAVE_PSADDR_T, [Define if system headers will define psaddr_t])
AH_TEMPLATE(LIBTHREAD_DB_SO, [Define name / location of libthread_db.so])
AH_TEMPLATE(LINUX_TARGET, [Define if target is any Linux])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG,
            [Define if ptrace arg1 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG1_TYPE_LONG_LONG,
            [Define if ptrace arg1 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG,
            [Define if ptrace arg2 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG2_TYPE_LONG_LONG,
            [Define if ptrace arg2 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG,
            [Define if ptrace arg3 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG3_TYPE_LONG_LONG,
            [Define if ptrace arg3 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG,
            [Define if ptrace arg4 type is long or unsigned long.])
AH_TEMPLATE(PTRACE_ARG4_TYPE_LONG_LONG,
            [Define if ptrace arg4 type is long long or unsigned long long.])
AH_TEMPLATE(PTRACE_XFER_SIZE,
	    [Define for ptrace systems, to the size of a ptrace word.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG,
            [Define if ptrace transfer type is long or unsigned long.])
AH_TEMPLATE(PTRACE_XFER_TYPE_LONG_LONG,
          [Define if ptrace transfer type is long long or unsigned long long.])

case "$target" in
  am33_2.0*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o"
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  mips64*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  i?86*linux* | \
  powerpc*linux* | \
  arm*linux* | \
  mips*linux* | \
  frv*linux*)
    TARGET_MODULES="linux-target.o thread-db.o lwp-pool.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *linux*)
    TARGET_MODULES="linux-target.o no-threads.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *solaris*)
    TARGET_MODULES="solaris-target.o dummy-target.o" 
    AC_DEFINE(SOLARIS_TARGET, [1], [Define if target is any Solaris])
# Place-holders -- not necessarily correct...
    AC_DEFINE(GREGSET_T,  gregset_t,
              [Define the type name of a gregset])
    AC_DEFINE(FPREGSET_T, fpregset_t)
    ;;
esac

# Some architectures use the stock breakpoint model.
case "$target" in
  i?86*linux* | frv*linux* | am33*linux*)
    TARGET_MODULES="$TARGET_MODULES stock-breakpoints.o"
    AC_DEFINE(STOCK_BREAKPOINTS, [1],
              [Define if the target uses the stock-breakpoints.o module.])
  ;;
esac

AC_SUBST(TARGET_MODULES)

case "$target" in
  am33_2.0*linux*)
    AC_DEFINE(AM33_2_0_LINUX_TARGET, [1],
              [Define if target is am33 Linux.])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  *solaris*)
    dnl FIXME: differentiate between flavors of Solaris!
    AC_DEFINE(SPARC32_SOLARIS_TARGET, [1],
              [Define if target is 32-bit SPARC Solaris.])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  sh*linux*)
    AC_DEFINE(SH_LINUX_TARGET, [1], [Define if target is SH (3? 4?) Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  mips64*linux*)
    AC_DEFINE(MIPS64_LINUX_TARGET, [1], [Define if target is 64-bit MIPS Linux])
    AC_MSG_CHECKING([mips abi])
    mipsabi=o32
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
#if !defined(_ABIN32) || _MIPS_SIM != _ABIN32
#error not n32
#endif
    ]])],[mipsabi=n32])
    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
#if !defined(_ABI64) || _MIPS_SIM != _ABI64
#error not n64
#endif
    ]])],[mipsabi=n64])
    AC_MSG_RESULT([$mipsabi])
    case $mipsabi in
      o32)
	AC_DEFINE(MIPS_ABI_O32, [1], [Define if target uses MIPS o32 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 4)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
        ;;
      n32)
	AC_DEFINE(MIPS_ABI_N32, [1], [Define if target uses MIPS n32 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 8)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
        ;;
      n64)
	AC_DEFINE(MIPS_ABI_N64, [1], [Define if target uses MIPS n64 ABI])
	AC_DEFINE(PTRACE_XFER_SIZE, 8)
	AC_DEFINE(PTRACE_XFER_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
	AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
        ;;
    esac
    ;;
  mips*linux*)
    AC_DEFINE(MIPS_LINUX_TARGET, [1], [Define if target is (32-bit) MIPS Linux])
    AC_DEFINE(MIPS_ABI_O32)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  i?86*linux*)
    AC_DEFINE(X86_LINUX_TARGET, [1], [Define if target is x86 Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  powerpc*linux*)
    AC_DEFINE(PPC_LINUX_TARGET, [1], [Define if target is powerpc Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  m68k*linux*)
    AC_DEFINE(M68K_LINUX_TARGET, [1], [Define if target is m68k Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  alpha*linux*)
    AC_DEFINE(ALPHA_LINUX_TARGET, [1],
              [Define if target is Alpha Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
    ;;
  arm*linux*)
	if test "$arm32" = "yes"; then
	    AC_DEFINE(ARM_LINUX_TARGET, [1],
	              [Define if target is ARM Linux])
    	    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
      	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
	else
    	    AC_DEFINE(ARM_LINUX_TARGET)
    	    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
	fi
	;;
  frv*linux*)
    AC_DEFINE(FRV_LINUX_TARGET, [1],
              [Define if target is FRV Linux])
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
esac

dnl Outputs
AC_OUTPUT(Makefile)
