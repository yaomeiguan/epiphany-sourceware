dnl Process this file with autoconf to produce a configure script.
AC_INIT(server.h)
AC_CANONICAL_SYSTEM
# case "$target" in
#    sh-*) CC=sh-linux-gnu-gcc;;
# esac
AM_INIT_AUTOMAKE(rda,0.1)
AM_CONFIG_HEADER(config.h:config.in)

dnl automake support
AM_MAINTAINER_MODE
AM_PROG_LIBTOOL
AC_EXEEXT
AC_LANG_C

arm32=yes
AC_ARG_ENABLE(arm32,
[  --enable-arm32=yes to force arm to 32 bit compilation],
[case "${enableval}" in
  yes) arm32=yes ;;
  no)  arm32=no ;;
  *)
esac])

dnl headers
AC_CHECK_HEADERS(errno.h ptrace.h signal.h string.h strings.h sys/procfs.h \
	asm/reg.h sys/ptrace.h sys/reg.h sys/user.h sys/wait.h )

dnl define ptrace_xfer_type
dnl define ptrace_arg3_type

case "$target" in
  i?86*linux* | \
  powerpc*linux* | \
  arm*linux* | \
  mips*linux*)
    TARGET_MODULES="linux-target.o thread-db.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *linux*)
    TARGET_MODULES="linux-target.o no-threads.o ptrace-target.o" 
    AC_DEFINE(LINUX_TARGET)
    AC_DEFINE(GREGSET_T,  prgregset_t)
    AC_DEFINE(FPREGSET_T, prfpregset_t)
    AC_DEFINE(HAVE_LWPID_T)
    AC_DEFINE(HAVE_PSADDR_T)
    AC_DEFINE(HAVE_PRGREGSET_T)
    AC_DEFINE(HAVE_PRFPREGSET_T)
    ;;
  *solaris*)
    TARGET_MODULES="solaris-target.o dummy-target.o" 
    AC_DEFINE(SOLARIS_TARGET)
# Place-holders -- not necessarily correct...
    AC_DEFINE(GREGSET_T,  gregset_t)
    AC_DEFINE(FPREGSET_T, fpregset_t)
    ;;
esac

AC_SUBST(TARGET_MODULES)

case "$target" in
  *solaris*)
    dnl FIXME: differentiate between flavors of Solaris!
    AC_DEFINE(SPARC32_SOLARIS_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  sh*linux*)
    AC_DEFINE(SH_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  mips*linux*)
    AC_DEFINE(MIPS_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  i?86*linux*)
    AC_DEFINE(X86_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  powerpc*linux*)
    AC_DEFINE(PPC_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  m68k*linux*)
    AC_DEFINE(M68K_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
    ;;
  alpha*linux*)
    AC_DEFINE(ALPHA_LINUX_TARGET)
    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
    ;;
  arm*linux*)
	if test "$arm32" = "yes"; then
	    AC_DEFINE(ARM_LINUX_TARGET)
    	    AC_DEFINE(PTRACE_XFER_SIZE, 4)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG)
      	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG)
	else
    	    AC_DEFINE(ARM_LINUX_TARGET)
    	    AC_DEFINE(PTRACE_XFER_SIZE, 8)
    	    AC_DEFINE(PTRACE_XFER_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG1_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG2_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG3_TYPE_LONG_LONG)
    	    AC_DEFINE(PTRACE_ARG4_TYPE_LONG_LONG)
	fi
	;;
esac

if test -f /usr/include/foo.h; then
  AC_DEFINE(HAVE_AC_DEFINE, 1, [define if have AC_DEFINE])
fi

dnl Outputs
AC_OUTPUT(Makefile)
